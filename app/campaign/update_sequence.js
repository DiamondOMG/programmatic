"use server";

// ‡∏≠‡πà‡∏≤‡∏ô environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Basic Auth
const STACKS_USERNAME = process.env.STACKS_USERNAME;
const STACKS_PASSWORD = process.env.STACKS_PASSWORD;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á modifiedMillis (Unix timestamp 13 ‡∏´‡∏•‡∏±‡∏Å)
function generateModifiedMillis() {
  return Date.now().toString();
}

// Main server action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update sequence
export async function updateSequence(formData) {
  try {
    const libraryId = formData.get("libraryId");
    const startDateTime = formData.get("seq_startdate"); // ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô UnixTime UTC ‡πÅ‡∏•‡πâ‡∏ß
    const endDateTime = formData.get("seq_enddate"); // ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô UnixTime UTC ‡πÅ‡∏•‡πâ‡∏ß
    const duration = formData.get("seq_duration");

    // üîπ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å dropdown ‡πÉ‡∏´‡∏°‡πà
    const seq_condition = formData.get("seq_condition") || "displayAspectRatio == \"1920x1080\"";
    const seq_slot = formData.get("seq_slot") || "1";
    const seq_item = formData.get("seq_item") || "1";
    const seq_label = formData.get("seq_label") || "";

    // ‡∏î‡∏∂‡∏á prefix ‡∏ï‡∏≤‡∏° type ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
    const prefix = "13DA9DDD7E8E70";

    // üîπ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö URL ‡πÅ‡∏ö‡∏ö dynamic ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const SEQUENCE_API_URL = `https://stacks.targetr.net/rest-api/v1/op/sequence/${prefix}/${seq_slot}/${seq_item}`;

    if (!STACKS_USERNAME || !STACKS_PASSWORD) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏ô environment variables",
      };
    }

    // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PUT request
    const requestBody = {
      type: "libraryitem",
      id: libraryId,
      data: {
        modifiedMillis: generateModifiedMillis(),
        condition: seq_condition,
        label:seq_label
      },
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ optional
    if (startDateTime) requestBody.data.startMillis = startDateTime;
    if (endDateTime) requestBody.data.endMillis = endDateTime;
    if (duration) requestBody.data.durationMillis = duration;

    // üîπ Basic Auth
    const auth = Buffer.from(`${STACKS_USERNAME}:${STACKS_PASSWORD}`).toString(
      "base64"
    );
    console.log("requestBody", requestBody, SEQUENCE_API_URL);
    // üîπ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ PUT ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const response = await fetch(SEQUENCE_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Basic ${auth}`,
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(
        `Failed to update sequence: ${response.status} ${response.statusText}`
      );
    }

    const result = await response.json();

    return {
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï sequence ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: result,
    };
  } catch (error) {
    console.error("Update sequence error:", error);
    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï sequence",
    };
  }
}
